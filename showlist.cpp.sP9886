#include "showlist.h"
//#include "ui_showlist.h"
#include <QtSql/QSqlDatabase>
#include <sqlite3.h>
#include <QDebug>
#include <QtSql/QSqlQueryModel>
#include <QTableView>
#include <QTableWidget>
#include <QString>
showlist::showlist(QWidget *parent) :
    QWidget(parent)
  //,
   // ui(new Ui::showlist)
{
  //  ui->setupUi(this);
    btn_back= new QPushButton(tr("back"));
     btn_search=new QPushButton(tr("search via type"));
     line_name = new QLineEdit;
     show_picture();
//  btn_back= new QPushButton(tr("back"));
    //btn_search=new QPushButton(tr("search via type"));

    connect(btn_back,SIGNAL(clicked()),this,SLOT(back2before()));
    connect(btn_search,SIGNAL(clicked()),this,SLOT(searchviatype()));
}

showlist::~showlist()
{
   // delete ui;
}

void showlist::back2before()
{
    Student *stu1 = new Student(this);
    stu1->show();
   //  this->close();
}

void showlist::show_picture()
{

    QTableWidget *table_show = new QTableWidget;
    table_show->setColumnCount(4);
    table_show->setRowCount(15);
    QStringList headers;
    headers<<"room"<<"type"<<"addr"<<"data";
    table_show->setHorizontalHeaderLabels(headers);

    QHBoxLayout *upLayout = new QHBoxLayout;
    upLayout->addWidget(btn_back);
    upLayout->addWidget(btn_search);
    upLayout->addWidget(line_name);

    QVBoxLayout *mainLayout = new QVBoxLayout;
    mainLayout->addLayout(upLayout);
    mainLayout->addWidget(table_show);
    setLayout(mainLayout);

    static sqlite3 *db=NULL;
    char *Msg_err=NULL;
    static char **dbResult;
    static int nRow, nColumn,ok;

    ok=sqlite3_open(sql_name,&db);
    if (ok == SQLITE_OK) {
            qDebug("Database opened sucessfully in the process of show list!\n ");
    }
    else {
            qDebug("Open database failed !  %s\n",Msg_err);
    }
        ok= sqlite3_get_table(db,"select * from data_table",&dbResult,&nRow,&nColumn,&Msg_err);
        for(int i=1;i<=nRow;i++) {
            QString room=dbResult[4*i];
            QString type =dbResult[4*i+1];
            QString addr = dbResult[4*i+2];
            QString data = dbResult[4*i+3];
             table_show->setItem(i-1,0,new QTableWidgetItem(room));
             table_show->setItem(i-1,1,new QTableWidgetItem(type));
             table_show->setItem(i-1,2,new QTableWidgetItem(addr));
             table_show->setItem(i-1,3,new QTableWidgetItem(data));
        }
        sqlite3_free_table(dbResult);
        sqlite3_close(db);
      //  table_show->show();

       // window->exec();

}

void showlist::searchviatype()
{
    QTableWidget *table_show = new QTableWidget;
    table_show->setColumnCount(4);
    table_show->setRowCount(15);
    QStringList headers;
    headers<<"room"<<"type"<<"addr"<<"data";
    table_show->setHorizontalHeaderLabels(headers);
    struct Data {
        int room;
        int type;
        char* addr;
        char* data;
    }Datalist;
    static sqlite3 *db=NULL;
    char *Msg_err=NULL;
    static char **dbResult;
    static int nRow, nColumn, ok;
    int sensortype=line_name->text().toInt();
    qDebug("The input is %d\n",sensortype);
    ok=sqlite3_open(sql_name,&db);
    if (ok == SQLITE_OK) {
            qDebug("查找数据时，数据库打开正确!\n ");
    }
    else {
            qDebug("查找数据时，数据库打开不正确 !  %s\n",Msg_err);
    }
   // QSqlQuery query;
    //query.prepare("select * from data_table where sensor_type= ?");
   // query.bindValue(sensortype);
  // ok=sqlite3_get_table(db,"select * from data_table where sensor_type= ?",&dbResult,&nRow,&nColumn,&Msg_err);

    char*  sql = (char*)"select * from data_table where sensor_type= ?";
    sqlite3_stmt  *stmt = NULL;
    ok = sqlite3_prepare_v2(db,sql,strlen(sql),&stmt,NULL);
   if (ok == SQLITE_OK) {
           qDebug("查找数据时，得到了数据!\n ");
   }
   else {
           qDebug("查找数据时，没有得到数据 !  %s\n",Msg_err);
   }
   sqlite3_bind_int(stmt,1,sensortype);
   nColumn = sqlite3_column_count(stmt);
   //sqlite3_bind_int(stmt,1,sensortype);
   qDebug("有%d列!\n",nColumn);
   ok= sqlite3_step(stmt);
   while(1) {
        if (ok==SQLITE_ROW) {
            for(int i=0;i<nColumn;i++) {
                if(i==0)
                Datalist.room  =(int)sqlite3_column_text(stmt,i);
                 if(i==0)
                 {
                     dat.=str;
                 }
              // initWithUTF8String
                 qDebug()<<str1;
                //qDebug("%s",str);
            }
        }
        else if(ok==SQLITE_DONE) {
            qDebug("选择完成！\n");
        }
        else
            qDebug("错误！");
        if (sqlite3_step(stmt) != SQLITE_ROW)
                break;
   }
   for(int i=1;i<=nRow;i++) {
       QString room=dbResult[4*i];
       QString type =dbResult[4*i+1];
       QString addr = dbResult[4*i+2];
       QString data = dbResult[4*i+3];
        table_show->setItem(i-1,0,new QTableWidgetItem(room));
        table_show->setItem(i-1,1,new QTableWidgetItem(type));
        table_show->setItem(i-1,2,new QTableWidgetItem(addr));
        table_show->setItem(i-1,3,new QTableWidgetItem(data));
   }
   sqlite3_free_table(dbResult);
   sqlite3_close(db);
   /*
    char *sql = (char *)"select * from data_table where sensor_type= ";
    sqlite3_stmt  *stmt = NULL;
    ok = sqlite3_prepare_v2(db,sql,strlen(sql),&stmt,NULL);
    if(ok != SQLITE_OK)
    {
       // Msg_err = sqlite3_errmsg(db);
        if(stmt)
        {
            sqlite3_finalize(stmt);
        }
        sqlite3_close(db);
     }
     sqlite3_bind_int(stmt,1,sensortype);
     int nColumn=sqlite3_column_count(stmt);
     qDebug("The column is :%d\n",nColumn);

     if(sqlite3_step(stmt) != SQLITE_DONE) {
            sqlite3_finalize(stmt);
            sqlite3_close(db);
            qDebug("insert values is failed \n");
      }
      else {
            qDebug("insert values is sucessful !\n");
            sqlite3_reset(stmt);
            sqlite3_finalize(stmt);
     }
     sqlite3_free_table(dbResult);
     sqlite3_close(db);
     */
}
